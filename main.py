import os
import subprocess
import urllib.parse
from datetime import datetime, timedelta, timezone
from functools import wraps

from apscheduler.schedulers.blocking import BlockingScheduler
from dotenv import load_dotenv
from loguru import logger

load_dotenv()

import message
from database import db
from dictionaries import CATEGORY_URLS
from movie import Movie
from parcer import (check_movie_release, download_video,
                    get_top_movies_and_serials, get_youtube_links)

CATEGORY_BAN_LIST = os.getenv("CATEGORY_BAN_LIST").split()
COUNTRY_BAN_LIST = os.getenv("COUNTRY_BAN_LIST").split()

def time_spent(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        time_start = datetime.now()

        r = func(*args, **kwargs)

        time_end = datetime.now() - time_start
        hours = time_end.seconds // 3600
        minutes = (time_end.seconds % 3600) // 60
        seconds = time_end.seconds % 60
        milliseconds = time_end.microseconds // 1000
        if hours > 0:
            logger.info(f"{func.__name__} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫ {milliseconds} –º—Å")
        elif minutes > 0:
            logger.info(f"{func.__name__} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {minutes} –º–∏–Ω {seconds} —Å–µ–∫ {milliseconds} –º—Å")
        elif seconds > 0:
            logger.info(f"{func.__name__} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {seconds} —Å–µ–∫ {milliseconds} –º—Å")
        else:
            logger.info(f"{func.__name__} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {milliseconds} –º—Å")
        return r
    return wrapper

@time_spent
def check_updates():
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
    result = subprocess.run(
        ["pip", "list", "--outdated", "--format=json"],
        capture_output=True,
        text=True
    )
    outdated_packages = eval(result.stdout)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π

    # –®–∞–≥ 2: –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    for package in outdated_packages:
        package_name = package['name']
        if package_name == "pip":
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è pip
            logger.info("–û–±–Ω–æ–≤–ª—è–µ–º pip...")
            subprocess.run([
                "python", "-m", "pip", "install", "--upgrade", "pip"
            ])
        else:
            logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç: {package_name}")
            subprocess.run(["pip", "install", "--upgrade", package_name])

@time_spent
def update_table():
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü")
    current_year = datetime.now().year - 1
    for content_type, content_type_url in CATEGORY_URLS.items():
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        db.create_table(table_name=content_type)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤
        get_top_movies_and_serials(content_type, content_type_url, current_year)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –Ω–µ –≤—ã—à–µ–¥—à–∏–π —Ñ–∏–ª—å–º
        not_released_movies = db.get_table(table_name=content_type, data=Movie(date_now=None).to_dict, fetchone=False)
        if not_released_movies:
            check_movie_release(content_type=content_type, not_released_movies=not_released_movies)

@time_spent
def send_new_movies():
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ telegram")

    for content_type, content_type_url in CATEGORY_URLS.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã—à–ª–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
        time_ago = datetime.now(timezone.utc) - timedelta(hours=2)
        recent_movies = db.get_table(
            table_name=content_type,
            data=Movie(date_now=(">=", time_ago)).to_dict,
            sort_by="rating DESC",
            fetchone=False
        )
        if recent_movies:
            for movie in recent_movies:
                movie = Movie.from_dict(movie)

                categories = movie.get_translated_categories()
                countries = movie.get_translated_countries()

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                if not Movie.filter_passes(categories, CATEGORY_BAN_LIST):
                    continue
                if not Movie.filter_passes(countries, COUNTRY_BAN_LIST):
                    continue

                year_mod = movie.year_start
                if movie.year_end:
                    year_mod = f"{movie.year_start}-{movie.year_end}"
                title_trailer = f"{movie.title_original} {movie.year_start} —Ç—Ä–µ–π–ª–µ—Ä"
                if movie.year_end:
                    title_trailer = f"{movie.title_original} {movie.year_end} —Ç—Ä–µ–π–ª–µ—Ä"
                title_full = f"{movie.title} ({year_mod})"

                # –ö–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è YouTube-–ø–æ–∏—Å–∫–∞
                title_trailer_encoded = urllib.parse.quote_plus(title_trailer)
                youtube_url = f"https://www.youtube.com/results?search_query={title_trailer_encoded}"

                title_original_display = f"<b><a href='{youtube_url}'>{movie.title_original}</a></b>\n"
                if movie.title_original == movie.title:
                    title_original_display = ""

                genre_content = (
                    f"<b><u>#{content_type}</u></b>\n"
                    f"<b><a href='{youtube_url}'>{title_full}</a></b>\n"
                    f"{title_original_display}"
                    f"{countries}\n"
                    f"üé¨ {categories}\n"
                    f"‚≠êÔ∏è <a href='{movie.url}'>{movie.rating}</a>\n"
                    f"{movie.description}")

                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–ª–µ—Ä
                    youtube_links = get_youtube_links(video_name=title_trailer)
                    video_path = None
                    for youtube_link in youtube_links:
                        try:
                            video_path = download_video(url=youtube_link, output_name=title_trailer)
                            break
                        except Exception as e:
                            if "Sign in to confirm your age." in str(e):
                                continue
                            message.send_report(e)
                    if len(genre_content) <= 4096:
                        message.send_telegram_video(video_path=video_path, message=genre_content)
                    else:
                        message.send_report(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å. –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(genre_content)}")
                    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if video_path:
                        os.remove(video_path)
                except Exception as e:
                    # –û–±–Ω—É–ª—è–µ–º –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞ —Ñ–∏–ª—å–º–∞
                    db.update_table(
                        table_name=content_type,
                        data=Movie(url=movie.url).to_dict,
                        updates=Movie(date_now=None).to_dict
                    )
                    message.send_report(e)

scheduler = BlockingScheduler()
scheduler.add_job(check_updates, 'cron', hour=14, minute=0)
scheduler.add_job(update_table, 'cron', hour=15, minute=0)
scheduler.add_job(send_new_movies, 'cron', hour=16, minute=0)

if __name__ == "__main__":
    scheduler.start()